// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	model "kanggo/pkg/entity/model"

	mock "github.com/stretchr/testify/mock"
)

// ProductUsecase is an autogenerated mock type for the ProductUsecase type
type ProductUsecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProductUsecase) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProductUsecase) GetAll(ctx context.Context) ([]model.ProductResponse, error) {
	ret := _m.Called(ctx)

	var r0 []model.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context) []model.ProductResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *ProductUsecase) GetById(ctx context.Context, id int64) (*model.ProductResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.ProductResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, data
func (_m *ProductUsecase) Insert(ctx context.Context, data model.ProductRequest) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ProductRequest) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, data
func (_m *ProductUsecase) Update(ctx context.Context, id uint, data model.ProductRequest) error {
	ret := _m.Called(ctx, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, model.ProductRequest) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
