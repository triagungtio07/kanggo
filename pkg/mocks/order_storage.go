// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	model "kanggo/pkg/entity/model"

	mock "github.com/stretchr/testify/mock"

	schema "kanggo/pkg/entity/schema"
)

// OrderStorage is an autogenerated mock type for the OrderStorage type
type OrderStorage struct {
	mock.Mock
}

// GetAllOrder provides a mock function with given fields: ctx
func (_m *OrderStorage) GetAllOrder(ctx context.Context) ([]model.OrderResponse, error) {
	ret := _m.Called(ctx)

	var r0 []model.OrderResponse
	if rf, ok := ret.Get(0).(func(context.Context) []model.OrderResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrderPerUser provides a mock function with given fields: ctx, userId
func (_m *OrderStorage) GetAllOrderPerUser(ctx context.Context, userId uint64) ([]model.OrderResponse, error) {
	ret := _m.Called(ctx, userId)

	var r0 []model.OrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []model.OrderResponse); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: ctx, orderId, userId
func (_m *OrderStorage) GetOrderById(ctx context.Context, orderId int64, userId uint64) (*model.OrderResponse, error) {
	ret := _m.Called(ctx, orderId, userId)

	var r0 *model.OrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint64) *model.OrderResponse); ok {
		r0 = rf(ctx, orderId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, uint64) error); ok {
		r1 = rf(ctx, orderId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: ctx, data, quantity
func (_m *OrderStorage) InsertOrder(ctx context.Context, data schema.Order, quantity int64) error {
	ret := _m.Called(ctx, data, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.Order, int64) error); ok {
		r0 = rf(ctx, data, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePayment provides a mock function with given fields: ctx, data
func (_m *OrderStorage) UpdatePayment(ctx context.Context, data schema.Order) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.Order) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
