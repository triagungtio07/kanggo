// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	schema "kanggo/pkg/entity/schema"
)

// ProductStorage is an autogenerated mock type for the ProductStorage type
type ProductStorage struct {
	mock.Mock
}

// CheckQty provides a mock function with given fields: ctx, productId, amount
func (_m *ProductStorage) CheckQty(ctx context.Context, productId int64, amount int64) (bool, error) {
	ret := _m.Called(ctx, productId, amount)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(ctx, productId, amount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, productId, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ProductStorage) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProductStorage) GetAll(ctx context.Context) ([]schema.Product, error) {
	ret := _m.Called(ctx)

	var r0 []schema.Product
	if rf, ok := ret.Get(0).(func(context.Context) []schema.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *ProductStorage) GetById(ctx context.Context, id int64) (*schema.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 *schema.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) *schema.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, data
func (_m *ProductStorage) Insert(ctx context.Context, data schema.Product) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.Product) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, data
func (_m *ProductStorage) Update(ctx context.Context, data schema.Product) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.Product) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
